<?php
/**************************************************************************************
 * (c) 2013 - Roan Mooij - Mr Media Ltd
 *
 * mplatform drupal plugin v1.1
 *
 * Note on "SUBCRIPTION_DURATION": After a closed subscription, the user should still
 * have access for a week
 *
 **************************************************************************************/

//===============================[ User Definable ]=====================================

$GLOBALS["SERVICE_IDS"] = array();
$GLOBALS["ADMIN_USERS"] = array();
$GLOBALS["COUNTRY_AREA_CODE"] = "";
$GLOBALS["PHONE_NO_LENGTH"] = "";
$GLOBALS["SUBSCRIPTION_DURATION"] = ""; // in millis
$GLOBALS["MPLATFORM_AUTH_SERVLET"] = "";

/***********************Drupal Menu*************/
function mplatform_menu() {

	$items['admin/mplatform'] = array(
			'title' => 'Mplatform Global Variable Settings',
			'description' => 'We can set here the inital values supplied for mplatform API',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('set_mplatform_variables'),
			'access callback' => check_for_admin_users()
	);
	
	return $items;
}

/************Mplatform settings variables is accesible only by admin users **********/
function check_for_admin_users(){
	// Load the currently logged in user.
	global $user;
	// Check if the user has the 'administrator' role.
	if (in_array('administrator', $user->roles)) 
	{
	  return true;
	}
	return true; 
	
}

/******************Drupal Settings function for global variables****************/
function set_mplatform_variables() {

	$form['service_ids'] = array(
			'#type' => 'textfield',
			'#title' => 'Service Ids',
			'#default_value' => variable_get('service_ids', '11612, 11720'),
			'#required' => TRUE,
			'#description' => t('Please place comman saperated service ids'),
	);

	$form['admin_users'] = array(
			'#type' => 'textfield',
			'#title' => 'Admin Users',
			'#default_value' => variable_get('admin_users', 'admin'),
			'#required' => TRUE,
			'#description' => t('Please place comman saperated admin users'),
	);

	$form['countrycode'] = array(
			'#type' => 'textfield',
			'#title' => 'Country Area Code',
			'#default_value' => variable_get('countrycode', '31'),
			'#required' => TRUE,
			'#description' => t('Please place country code'),
	);
	
	$form['phone_length'] = array(
			'#type' => 'textfield',
			'#title' => 'Phone Length',
			'#default_value' => variable_get('phone_length', '10'),
			'#required' => TRUE,
			'#description' => t('Please place phone number length'),
	);
	
	$form['subscription_duration'] = array(
			'#type' => 'select',
			'#title' => 'Subscription Duration',
			'#default_value' => variable_get('subscription_duration', '3600 * 24 * 7 * 1000'),
			'#options'=>array(
						'3600 * 24 * 1 * 1000'=>'ONE DAY',
						'3600 * 24 * 7 * 1000'=>'ONE WEEK',
						'3600 * 24 * 30 * 1000'=>'ONE MONTH',
						'3600 * 24 * 365 * 1000'=>'ONE YEAR',
					),
			'#required' => TRUE,
			'#description' => t('Please place subscription duration'),
	);
	
	$form['api_url'] = array(
			'#type' => 'textfield',
			'#title' => 'Mplatform API Url',
			'#default_value' => variable_get('api_url', 'http://mplatform.mrmedia.org/subscription/detail'),
			'#required' => TRUE,
			'#description' => t('Please place API Url'),
	);
	
	return system_settings_form($form);
}


//===============================[ Drupal Hooks ]=======================================

/******************Function to initialize the global variables*********************/
function mplatform_init(){
	
	$serviceIds = explode(",", variable_get('service_ids'));
	$GLOBALS["SERVICE_IDS"] = $serviceIds;
	$adminusers = explode(",", variable_get('admin_users'));
	$GLOBALS["ADMIN_USERS"] = $adminusers;
	$GLOBALS["COUNTRY_AREA_CODE"] = variable_get('countrycode');
	$GLOBALS["PHONE_NO_LENGTH"] = variable_get('phone_length');
	$GLOBALS["SUBSCRIPTION_DURATION"] = (variable_get('subscription_duration')); // in millis
	$GLOBALS["MPLATFORM_AUTH_SERVLET"] = variable_get('api_url');
}

/*
* Hide unecessary stuff on the login form and add a custom validator.
*/
function mplatform_form_alter(&$form, &$form_state, $form_id) {
	if ($form["#id"] == 'user-login') {
		$form['name']['#title'] = t("Telefoonnummer");
		$form['pass']['#default_value'] = 'dummy';
		hide($form['pass']);
		hide($form['links']);
		array_unshift($form['#validate'], 'mplatform_login_form_validate');
	}
}

/*
* Here we will validate the phone number, or in case of an admin show the password
* entry field. Based on the response of the validation request an message is given
* or the user may proceed.
* The result of a validated phone number is saved in $form_state and later used in the
* custom authentication function.
*/
function mplatform_login_form_validate(&$form, &$form_state) {
	$uname = $form_state['values']['name'];
	$form_state['is-mplatform-subscriber'] = false;
	if (in_array($uname, $GLOBALS["ADMIN_USERS"])) {
		show($form['pass']);
	} else {
		if (is_numeric($uname) && (strlen($uname) == $GLOBALS["PHONE_NO_LENGTH"])) {
			$result = check_for_subscription($uname);
			switch ($result) {
				case "ACTIVATED":
					$form_state['is-mplatform-subscriber'] = true;
					break;
				default:
					form_set_error('name', 'Er is geen abonnement voor dit mobiele nummer');
			}
		} else {
			form_set_error('name', 'Dit telefoonnummer is onjuist');
		}
	}
}

function mplatform_form_user_login_block_alter(&$form, &$form_state) {
	_mplatform_user_login_form_alter($form, $form_state);
}

function mplatform_form_user_login_alter(&$form, &$form_state) {
	_mplatform_user_login_form_alter($form, $form_state);
}

function _mplatform_user_login_form_alter(&$form, &$form_state) {
	$save_form = $form;
	$form = array();
	foreach ($save_form as $key => $value) {
		if ($key == '#validate') {
			$form [$key] = array();
			foreach ($value as $validator) {
				if ($validator == 'user_login_authenticate_validate') {
					$validator = 'mplatform_authenticate_validate';
				}
				$form[$key][] = $validator;
			}
		} else {
			$form[$key] = $value;
		}
	}
}

function mplatform_authenticate_validate($form, &$form_state) {
	$uname = $form_state['values']['name'];

	// Do default drupal authentication
	if (in_array($uname, $GLOBALS["ADMIN_USERS"])) {
		return user_login_authenticate_validate($form, $form_state);
	}

	// Do external authentication
	if ($form_state['is-mplatform-subscriber'] == true) {
		user_external_login_register($uname, "mplatform-subscriber");
		$account = user_external_load($uname);
		assign_role_to_user($account, "Subscriber");
		$form_state['uid'] = $account->uid;
	}
	else {
		// do nothing
	}
}

//===============================[ Custom functions ]=======================================

function check_for_subscription($phone) {
        $url = $GLOBALS["MPLATFORM_AUTH_SERVLET"] . "?msisdn=" . phone_to_msisdn($phone);
        $result = json_decode(http_request($url));
        for ($i = 0; $i < count($result); $i++) {
		if (is_object($result[$i])) {
                	if (in_array($result[$i]->serviceId, $GLOBALS["SERVICE_IDS"])) {
                	        if ($result[$i]->state == "CONFIRMED") {
                	                if($result[$i]->lastInvoiceState == "SUCCESS") {
                	                        return "ACTIVATED";
                	                }
                	        } elseif ($result[$i]->state = "CLOSED"
                	                        && $result[$i]->lastInvoiceState = "SUCCESS"
                	                        && is_in_subscription_period($result[$i]->lastInvoice)) {
                	                return "ACTIVATED";
                	        }
                	}
		}
        }
}

function is_in_subscription_period($invoice_time) {
        if (((time() * 1000) - $GLOBALS["SUBSCRIPTION_DURATION"]) < $invoice_time) {
                return true;
        }
        return false;
}

function assign_role_to_user($user, $role_name) {
	// If the user doesn't already have the role, add the role to that user.
	$key = array_search($role_name, $user->roles);
	if ($key == FALSE) {
		// Get the role id from the roles table.
		$roles = user_roles(TRUE);
		$rid = array_search($role_name, $roles);
		if ($rid != FALSE) {
			$new_role[$rid] = $role_name;
			$all_roles = $user->roles + $new_role; // Add new role to existing roles.
			user_save($user, array('roles' => $all_roles));
		}
	}
}

function phone_to_msisdn($phone) {
	return $GLOBALS["COUNTRY_AREA_CODE"] . substr($phone, 1);
}

function http_request($url) {
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: text/xml;charset=utf-8"));
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_TIMEOUT, 30);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$resp = curl_exec($ch);
	curl_close($ch);
	return $resp;
}
